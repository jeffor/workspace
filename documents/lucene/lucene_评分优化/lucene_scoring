##################################################
		lucene 默认评分机制
##################################################
1 评分公式:
	score(q,d) = coord(q,d) · queryNorm(q) · ∑(t in q){ tf(t, d) · idf(t)^2 · t.getBoost() · norm(t,d) }

2 公式解析:
	coord(q, d)	[协调因子] 一篇文档中匹配的 query term 和 全部 query term 的数量之比;
	queryNorm(q)	[查询因子] 区分不同query所评的分值
	tf(t,d)		[词频] 一个 匹配的 term 在该文档中出现的频率
	idf(t)		[逆向文档频率] 一个匹配的 term 在索引中的逆向文档频率
	t.getBoost()	[语汇权重] 一个匹配的 term 在query中的权重(默认为1)
	norm(t, d)	[标准化因子] norm(t, d) = documentNorm(d) * fieldNorm(t, d)
					documentNorm(d) = d.getBoost()
					fieldNorm(t, d) = lengthNorm(field) · ∏f.getBoost()

##################################################
		优化方案
##################################################

1 公式优化:
	score(q,d) = coord(q, d) * ∑(t in q){idf(t)^2 * t.getBoost() * norm(t, d)}

2 优化详解:
	coord(q,d)	一篇文档中匹配的 query term 和 全部 query term 的数量之比;

	queryNorm(q)	只用于区分query，可以不计算;

	tf(t, d)	词频,由于商品标题中关键字普遍简明扼要,不应该根据词频区分关键字的重要性,可以统一认为
			每个商品关键字的词频都为1;

	idf(t)		当用户输入一个句子时，有必要区分各 query term 的权重;

	t.getBoost()	用于动态调整查询语句中各词汇的boost值(在关键字识别后将很有效果)

	norm(t,d)	norm 包含 documentNorm, fieldNorm, 以及 lengthNorm. 在商品查询时,由于数据域普遍简短,故
			lengthNorm 可以省略, 而 documentNorm 和 fieldNorm 可以用来区分 不同的 field 和 不同类型
			的 document, 因此需保留.
