
############################################
		泛型基础
############################################

1 使用泛型时，是在编译时进行类型检查的；

2 泛型类型不能为 Throwable 的 直接或间接 继承类，因为由于类型不明确，
  无法在编译时确定该类型会抛出的异常；

############################################
		泛型方法
############################################

3 泛型类型 也是一种类型， 当一个参数为泛型类型参数 且 不确定 具体的
  泛型关联时，可以使用泛型通配符( 如 String<?>) 实现任意泛型关联；

4 泛型方法的有界通配符 String<? extends Number>；


############################################
		泛型类型
############################################

public class Point<T>{
	private T x;
	private T y;

	public Point(T x, T y){
		this.x = x;
		this.y = y;
	}

	public T getX(){
		return x;
	}

	public T getY(){
		return y;
	}

	public void setX(T x){
		this.x = x;
	}

	public void setY(T y){
		this.y = y;
	}

}


