1 单一职责:			(针对一个类的创建)
	一个类只负责一个职能;
	当一个类负责多个职能时,修改 职责A 时可能会影响到 职责B 的实现(即职责间存在耦合性),
	因此在类设计时应尽量复合单一职责原则. 然而当一个类需要职责细化时会产生职责扩散,此时
	可以更具逻辑上的复杂程度选择适当的职责扩展:
		1 新增职责处理逻辑(代码级别修改,耦合性增强,违反单一职责);
		2 新建方法处理新职责(方法级别单一职责,耦合性有所降低);
		3 新建类处理新职责(类级别单一职责,实现复杂度最高);

2 里氏替换原则:			(针对类的扩展)
	一个子类尽量不要 overWrite 父类的方法;
	当子类扩展父类时可能因修改了父类的固有方法出现实现错误,因此除了 抽象方法,子类不应该
	重写父类的任何方法, 若因功能上的需要必须修改时, 应该考虑重建一个更为抽象的父类, 调整
	类之间的关系.

3 依赖倒置原则:			(面向接口编程,抽象架构)
	高层模块不应该依赖底层模块的细节,而是依赖底层模块的抽象接口;
	当底层模块修改时,依赖细节的高层模块往往会有随之修改的风险,因此应该实现面向接口编程,
	使对细节的依赖转换成对接口的依赖;基于抽象的架构往往比基于细节的架构更稳定;

4 接口隔离原则:			(接口创建原则)
	接口职责尽量单一,使实现类无需实现不必要的功能;
	当一个接口包含过多的职责时,每一个实现都必须完全实现其中的全部职责,此时会造成的实现冗余,
	因此定义的接口尽量职责单一.

5 迪米特原则:			(对象通信原则)
	类之间的通信难以避免,但是为了降低耦合,应该尽量只与直接依赖对象通信(参数, 返回值, 成员);
	迪米特原则意在尽量降低通信之间的耦合性,但是过分遵循会导致过多的数据传递,增加系统复杂性;

6 开闭原则:
	对扩展开放,对修改禁止;
	一个系统可能因为业务需求进行更新,此时应尽量避免对旧代码的修改,通过扩展更新是最明智的.
	在开发过程中,应该学会 "用抽象架构系统,用细节扩展功能".
